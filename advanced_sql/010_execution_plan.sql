USE AdventureWorksDW2022

-- Roadmap generated by a database

-- Stay in the cache
SELECT 
*
INTO FactResellerSales_HP
FROM FactResellerSales

SELECT 
*
FROM FactResellerSales_HP
ORDER BY SalesOrderNumber

SELECT 
*
FROM FactResellerSales
ORDER BY SalesOrderNumber


SELECT 
*
FROM FactResellerSales_HP
WHERE CarrierTrackingNumber = '4911-403C-98'

SELECT 
*
FROM FactResellerSales
WHERE CarrierTrackingNumber = '4911-403C-98'

CREATE NONCLUSTERED INDEX idx_FactReseller_CTA
ON FactResellersales (CarrierTrackingNumber)

-- Table Scan: Reads every row in a table
-- Index Scan: Reads all entries in an index to find results
-- Index Seek: Quickly locates specific rows in an index

SELECT 
    p.EnglishProductName product_name,
    SUM(s.SalesAmount) total_sales
FROM FactResellerSales s
JOIN DimProduct p
ON p.ProductKey = s.ProductKey
GROUP BY p.EnglishProductName

CREATE CLUSTERED COLUMNSTORE INDEX idx_FactResellerSalesHP
ON FactResellerSales_HP

-- SQL HINTS
-- Force the database to run in a specific way

USE SalesDB
SELECT
    o.Sales,
    c.Country
FROM Sales.Orders o
LEFT JOIN Sales.Customers c WITH (FORCESEEK)
ON o.CustomerID = c.CustomerID

-- OPTION (HASH JOIN)

-- AVOID OVER INDEXING

-- INDEXING STRATEGY

-- #1 Initial Indexing Strategy

-- OLAP (Online Analytical Processing)
-- Optimize Read performance
-- Switch Large frequently used tables into ColumnStore (fact tables)

-- OLTP (Online Transaction Processing)
-- Optimize Write Performance
-- Clustered Index Primary keys

-- #2 Usage Patterns Indexing

-- 1 Identify frequently used tables & columns
-- 2 Choose Right Index
-- 3 Test Index

-- #3 Scenario-Based Indexing

-- 1 Identify Slow Queries
-- 2 Check Execution Plan
-- 3 Choose Right Index
-- 4 (Test) Compare Execution Plans

-- #4 Monitoring & Maintenance

-- 1 Monitor Index Usage
-- 2 Monitor Missing Indexes
-- 3 Monitor Duplicate Indexes
-- 4 Update Statistics
-- 5 Monitor Fragmentations
